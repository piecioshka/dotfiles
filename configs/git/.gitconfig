[alias]
    # https://gist.github.com/ecaqsilla/9669241
    hist = log --pretty=format:'%C(green)%ad%C(reset) | %C(red)%h%C(reset) | %C(blue)%an%C(reset) | %s %C(yellow)%d%C(reset)' --date=short
    la = log --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr)%C(reset) %C(blue)%an%C(reset)' --stat
    ll = log --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr)%C(reset) %C(blue)%an%C(reset)' --date=relative
    lle = log --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr)%C(reset) %C(blue)%an%C(reset) %C(magenta)(%ae)%C(reset)' --date=relative

    age = "!f() { git log --reverse --pretty=oneline --format='%ar' | head -n 1 | LC_ALL=C sed 's/ago//'; }; f"

    first-commit = "!f() { git log --reverse | sed -n -e '1,5p'; }; f"
    first-commit-message = "!f() { git log --reverse --format='%s' | sed -n -e '1,1p'; }; f"
    first-commit-date = "!f() { git log --reverse --format='%ci' | sed -n -e '1,1p'; }; f"
    last-commit = log -1
    last-commit-message = "!f() { git log --format='%s' | sed -n -e '1,1p'; }; f"
    last-commit-date = "!f() { git log --format='%ci' | sed -n -e '1,1p'; }; f"

    # Usage: git save [-n]
    save = "!f() { git add . -v && git commit -am 'Save current state' $@; }; f"
    # Usage: git set-last-commit-date 2022-12-21_09:55:59
    set-last-commit-date = "!f() { GIT_COMMITTER_DATE=$1 git commit --amend --no-edit --date $1; }; f"

    delete-branch = "!f() { git branch -D $1; git push origin --delete $1; }; f"
    # Usage: git rename-branch OLD_NAME NEW_NAME
    rename-branch = "!f() { git branch -m $1 $2; git push origin :$1 $2; }; f"
    branch-name = "!f() { git rev-parse --abbrev-ref HEAD; }; f"

    feature = "!f() { git switch -c feature/$1; }; f"
    bugfix = "!f() { git switch -c bugfix/$1; }; f"

    delete-tag = "!f() { git tag -d $1; git push origin --delete $1; }; f"
    # Usage: git rename-tag OLD_NAME NEW_NAME
    rename-tag = "!f() { git tag $2 $1; git delete-tag $1; }; f"
    last-tag = "!f() { git tag --list --sort version:refname | tail -n 1; }; f"

    cp = cherry-pick

    reset-author = commit --amend --no-edit --reset-author
    set-default-branch = config remote.origin.push HEAD

    user-local = config user.email
    user-global = config --global user.email

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[branch]
    sort = -committerdate

# [branch "main"]
#     remote = origin
#     merge = refs/heads/main

# [branch "develop"]
#     remote = origin
#     merge = refs/heads/develop

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
    # Always add colors to output. Good for the "what-happened" command.
    status = always

[color "branch"]
    # current = yellow reverse
    # local = yellow
    # remote = green

[color "diff"]
    # meta = yellow bold
    # frag = magenta bold
    # old = red strike bold
    # new = green italic bold

[color "status"]
    # added = yellow
    # changed = green
    # untracked = cyan

[column]
    # ui = auto # Enable column output for commands that support it

[commit]
    gpgsign = false
    verbose = true

[core]
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as errors
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
    # Enable case sensitivity
    ignorecase = false
    # Enable global configuration for the ignore list
    excludesfile = ~/.gitignore
    # Set up the default editor
    editor = code --wait
    # Convert end of line to pair: CRLF
    autocrlf = input
    # Enable file system monitoring
    fsmonitor = true
    # Exit from the command when a file has a bad end of line
    safecrlf = true

[delta]
    syntax-theme = Monokai Extended
    navigate = true
    color-only = true
    line-numbers = true

[diff]
    # An incremental improvement on ‘patience’
    algorithm = histogram
    tool = vscode

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
    trustExitCode = false

[fetch]
    # Remove remote-tracking references that no longer exist on the remote
    prune = true
    # Remove tags that no longer exist on the remote
    pruneTags = true
    # Fetch all remotes
    all = true

[filter "media"]
    clean = git media clean %f
    smudge = git media smudge %f
    required = true

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[gpg]
    format = openpgp
    program = gpg

[gpg "ssh"]
    program = ssh-keygen
    allowedSignersFile = ""

[help]
    autocorrect = immediate

[init]
    defaultBranch = main

[interactive]
    diffFilter = delta --color-only

[merge]
    conflictstyle = diff3 # Options: merge, diff3, zdiff3
    tool = vscode
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[mergetool "vscode"]
    cmd = code --wait $MERGED
    trustExitCode = false

[pager]
    log = false
    diff = false
    show = false
    status = false
    reflog = false

[pull]
    # Rebase the current branch on top of the upstream branch after fetching
    rebase = true

[push]
    # Push the current branch to the remote branch with the same name
    default = simple
    # Automatically set up the remote as upstream
    autoSetupRemote = true
    # Push tags along with branches
    followTags = true

[remote "origin"]
    tagopt = --no-tags

[tag]
    gpgsign = false
    forceSignAnnotated = false
    sort = version:refname

[user]
    name = Piotr Kowalski

# Include private configuration
[include]
    path = ~/projects/dotfiles-private/.gitconfig

# Include platform-specific configuration
[include]
    # path = ~/projects/dotfiles/configs/git/.gitconfig-linux
    path = ~/projects/dotfiles/configs/git/.gitconfig-macos
    # path = ~/projects/dotfiles/configs/git/.gitconfig-windows
